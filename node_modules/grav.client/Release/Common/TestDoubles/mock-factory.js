"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockClientHavingNoImages = exports.mockClientHavingASingleImage = exports.mockClient = exports.mockHttpRequests = exports.mockHttpShim = void 0;
const Presentation_1 = require("../../Presentation");
const http_shim_1 = require("../../Infrastructure/http-shim");
const primitive_stubs_1 = require("./primitive-stubs");
const nock_1 = __importDefault(require("nock"));
const http_shim_2 = require("../../Infrastructure/http-shim");
const stub = __importStar(require("./response-stubs"));
const use_case_type_1 = require("../../Application/use-case-type");
function mockHttpShim(responseStub) {
    const httpShim = new http_shim_1.HttpShim(primitive_stubs_1.emailHash);
    spyOn(httpShim, "rpc").and.returnValue(responseStub);
    return httpShim;
}
exports.mockHttpShim = mockHttpShim;
function mockHttpRequests() {
    nock_1.default(http_shim_2.origin).post(`/xmlrpc?user=${primitive_stubs_1.emailHash}`).reply(200);
    nock_1.default("https://dailyavatar.io").post(`/api/v1/avatars`).reply(200).persist();
}
exports.mockHttpRequests = mockHttpRequests;
function mockClient(useCaseType = use_case_type_1.UseCaseType.None) {
    let client = new Presentation_1.GravatarClient(primitive_stubs_1.email, primitive_stubs_1.password);
    switch (useCaseType) {
        case use_case_type_1.UseCaseType.FindImage:
            spyOn(client, "userImages").and.returnValue(stub.UserImagesResponse());
            return client;
        case use_case_type_1.UseCaseType.GetPrimaryImage:
            spyOn(client, "addresses").and.returnValue(stub.AddressesResponse());
            return client;
        case use_case_type_1.UseCaseType.VerifyAccount:
            spyOn(client, "exists").and.returnValue(stub.ExistsResponse());
            spyOn(client, "test").and.returnValue(stub.TestResponse());
            return client;
        case use_case_type_1.UseCaseType.LoadNextImage:
        case use_case_type_1.UseCaseType.LoadPreviousImage:
            spyOn(client, "addresses").and.returnValue(stub.AddressesResponse());
            spyOn(client, "userImages").and.returnValue(stub.UserImagesResponse());
            spyOn(client, "useUserImage").and.returnValue(stub.UseUserImageResponse());
            return client;
        case use_case_type_1.UseCaseType.SetNewImage:
            spyOn(client, "saveImage").and.returnValue(stub.SaveImageResponse());
            spyOn(client, "saveImageUrl").and.returnValue(stub.SaveImageResponse());
            spyOn(client, "useUserImage").and.returnValue(stub.UseUserImageResponse());
            return client;
        default:
            return client;
    }
}
exports.mockClient = mockClient;
function mockClientHavingASingleImage() {
    let client = new Presentation_1.GravatarClient(primitive_stubs_1.email, primitive_stubs_1.password);
    spyOn(client, "addresses").and.returnValue(stub.AddressesResponse());
    spyOn(client, "userImages").and.returnValue(stub.UserImagesResponseSingleImage());
    spyOn(client, "useUserImage").and.returnValue(stub.UseUserImageResponse());
    return client;
}
exports.mockClientHavingASingleImage = mockClientHavingASingleImage;
function mockClientHavingNoImages() {
    let client = new Presentation_1.GravatarClient(primitive_stubs_1.email, primitive_stubs_1.password);
    spyOn(client, "addresses").and.returnValue(stub.AddressesResponse());
    spyOn(client, "userImages").and.returnValue(stub.UserImagesResponseNoImages());
    spyOn(client, "useUserImage").and.returnValue(stub.UseUserImageResponse());
    return client;
}
exports.mockClientHavingNoImages = mockClientHavingNoImages;
