"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestHttpResponse = exports.DeleteUserImageHttpResponse = exports.RemoveImageMultipleHttpResponse = exports.RemoveImageHttpResponse = exports.UseUserImageMultipleHttpResponse = exports.UseUserImageHttpResponse = exports.SaveEncodedImageHttpResponse = exports.SaveImageHttpResponse = exports.SaveImageUrlHttpResponse = exports.UserImagesHttpResponse = exports.UserImageHttpResponse = exports.UserImagesNoneHttpResponse = exports.AddressesMultipleHttpResponse = exports.AddressesHttpResponse = exports.ExistsMultipleHttpResponse = exports.ExistsHttpResponse = exports.BadRequestHttpResponse = exports.FaultHttpResponse = void 0;
const handlebars_1 = require("handlebars");
const stub = __importStar(require("../TestDoubles/xml-response-stubs"));
const faultResponse = handlebars_1.compile(stub.faultXml);
const existsResponse = handlebars_1.compile(stub.existsXml);
const existsMultipleResponse = handlebars_1.compile(stub.existsMultipleXml);
const addressesResponse = handlebars_1.compile(stub.addressesXml);
const addressesMultipleResponse = handlebars_1.compile(stub.addressesMultipleXml);
const useImageResponse = handlebars_1.compile(stub.useUserImageXml);
const useImageMultipleResponse = handlebars_1.compile(stub.useUserImageMultipleXml);
const removeImageResponse = handlebars_1.compile(stub.removeImageXml);
const removeImageMultipleResponse = handlebars_1.compile(stub.removeImageMultipleXml);
function errorResponse(errorMessage) {
    return faultResponse({ errorMessage });
}
function FaultHttpResponse(errorMessage) {
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(errorResponse(errorMessage)),
    });
}
exports.FaultHttpResponse = FaultHttpResponse;
function BadRequestHttpResponse(errorMessage) {
    return Promise.resolve({
        ok: false,
        status: 400,
        statusText: errorMessage,
    });
}
exports.BadRequestHttpResponse = BadRequestHttpResponse;
function ExistsHttpResponse(emailHash) {
    let xml = existsResponse({ emailHash });
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(xml),
    });
}
exports.ExistsHttpResponse = ExistsHttpResponse;
function ExistsMultipleHttpResponse(emailHash, email2Hash) {
    let xml = existsMultipleResponse({ emailHash, email2Hash });
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(xml),
    });
}
exports.ExistsMultipleHttpResponse = ExistsMultipleHttpResponse;
function AddressesHttpResponse(email) {
    let xml = addressesResponse({ email });
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(xml),
    });
}
exports.AddressesHttpResponse = AddressesHttpResponse;
function AddressesMultipleHttpResponse(email1, email2) {
    let xml = addressesMultipleResponse({ email1, email2 });
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(xml),
    });
}
exports.AddressesMultipleHttpResponse = AddressesMultipleHttpResponse;
function UserImagesNoneHttpResponse() {
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(stub.userImagesNoneXml),
    });
}
exports.UserImagesNoneHttpResponse = UserImagesNoneHttpResponse;
function UserImageHttpResponse() {
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(stub.userImagesSingleXml),
    });
}
exports.UserImageHttpResponse = UserImageHttpResponse;
function UserImagesHttpResponse() {
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(stub.userImagesXml),
    });
}
exports.UserImagesHttpResponse = UserImagesHttpResponse;
function SaveImageUrlHttpResponse() {
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(stub.saveImageUrlXml),
    });
}
exports.SaveImageUrlHttpResponse = SaveImageUrlHttpResponse;
function SaveImageHttpResponse() {
    return SaveImageUrlHttpResponse();
}
exports.SaveImageHttpResponse = SaveImageHttpResponse;
function SaveEncodedImageHttpResponse() {
    return SaveImageUrlHttpResponse();
}
exports.SaveEncodedImageHttpResponse = SaveEncodedImageHttpResponse;
function UseUserImageHttpResponse(email) {
    const xml = useImageResponse({ email });
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(xml),
    });
}
exports.UseUserImageHttpResponse = UseUserImageHttpResponse;
function UseUserImageMultipleHttpResponse(email1, email2) {
    const xml = useImageMultipleResponse({ email1, email2 });
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(xml),
    });
}
exports.UseUserImageMultipleHttpResponse = UseUserImageMultipleHttpResponse;
function RemoveImageHttpResponse(email) {
    const xml = removeImageResponse({ email });
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(xml),
    });
}
exports.RemoveImageHttpResponse = RemoveImageHttpResponse;
function RemoveImageMultipleHttpResponse(email1, email2) {
    const xml = removeImageMultipleResponse({ email1, email2 });
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(xml),
    });
}
exports.RemoveImageMultipleHttpResponse = RemoveImageMultipleHttpResponse;
function DeleteUserImageHttpResponse() {
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(stub.deleteUserImageXml),
    });
}
exports.DeleteUserImageHttpResponse = DeleteUserImageHttpResponse;
function TestHttpResponse() {
    return Promise.resolve({
        ok: true,
        status: 200,
        text: () => Promise.resolve(stub.testXml),
    });
}
exports.TestHttpResponse = TestHttpResponse;
