"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("jasmine");
const Presentation_1 = require("../Presentation");
const dotenv_1 = require("dotenv");
const path_1 = require("path");
const fs_1 = require("fs");
const primitive_stubs_1 = require("../Common/TestDoubles/primitive-stubs");
const Presentation_2 = require("../Presentation");
dotenv_1.config({ path: "Tests/.env" });
let originalPrimaryImage;
const email = process.env.EMAIL;
const password = process.env.PASSWORD;
const imageNames = { bubba: "", gump: "", shrimp: "" };
describe("GravatarClient", () => {
    let client;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        client = new Presentation_1.GravatarClient(email, password);
        const getPrimaryImageUseCase = new Presentation_2.GetPrimaryImageUseCase();
        getPrimaryImageUseCase.client = client;
        originalPrimaryImage = yield getPrimaryImageUseCase.execute();
    }));
    afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
        if (originalPrimaryImage.name) {
            yield client.useUserImage(originalPrimaryImage.name);
        }
        yield client.deleteUserImage(imageNames.bubba);
        yield client.deleteUserImage(imageNames.gump);
    }));
    it("should check if account exists", () => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield client.exists();
        expect(response).toBeDefined();
    }));
    it("should get account email addresses", () => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield client.addresses();
        expect(response.userAddresses).toBeDefined();
    }));
    it("should get user images", () => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield client.userImages();
        expect(response.userImages).toBeDefined();
    }));
    it("should upload image file", () => __awaiter(void 0, void 0, void 0, function* () {
        const imgPath = path_1.join(__dirname, "../Common/Assets/bubba.jpg");
        const response = yield client.saveImage(imgPath);
        imageNames.bubba = response.imageName;
        expect(response.imageName).toBeDefined();
    }));
    it("should upload encoded image", () => __awaiter(void 0, void 0, void 0, function* () {
        const imgPath = path_1.join(__dirname, "../Common/Assets/gump.jpg");
        const bitmap = fs_1.readFileSync(imgPath);
        const imageData = Buffer.from(bitmap).toString("base64");
        const response = yield client.saveEncodedImage(imageData);
        imageNames.gump = response.imageName;
        expect(response.imageName).toBeDefined();
    }));
    it("should save image url", () => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield client.saveImageUrl(primitive_stubs_1.imageUrl);
        imageNames.shrimp = response.imageName;
        expect(response.imageName).toBeDefined();
    }));
    it("should remove primary image", () => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield client.removeImage();
        expect(response.success).toBe(true);
    }));
    it("should update primary image", () => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield client.useUserImage(originalPrimaryImage.name || imageNames.shrimp);
        expect(response.success).toBe(true);
    }));
    it("should delete image", () => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield client.deleteUserImage(imageNames.shrimp);
        expect(response.success).toBe(true);
    }));
    it("should do sanity check", () => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield client.test();
        expect(response.response).toBeDefined();
    }));
});
