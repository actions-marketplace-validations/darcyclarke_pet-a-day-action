"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestMethodResponse = exports.DeleteUserImageMethodResponse = exports.RemoveImageMethodResponse = exports.UseUserImageMethodResponse = exports.UserImagesMethodResponse = exports.SaveImageMethodResponse = exports.AddressesMethodResponse = exports.ExistsMethodResponse = exports.MethodResponse = void 0;
const fault_error_1 = require("./fault-error");
const xml_js_1 = require("xml-js");
const user_image_1 = require("./user-image");
const user_address_1 = require("./user-address");
class MethodResponse {
    constructor(json) {
        this.json = json;
        let faultCode = 0;
        let faultString = "";
        const { fault } = this.json ? this.json.methodResponse : { fault: false };
        if (fault) {
            const members = fault.value.struct.member;
            members.map((member) => {
                if (member.name._text == "faultCode") {
                    faultCode = Number(this.parseFieldValue(member.value));
                }
                else if (member.name._text == "faultString") {
                    faultString = this.parseFieldValue(member.value);
                }
            });
            throw new fault_error_1.FaultError(faultCode, faultString);
        }
    }
    parseFieldValue(fieldValue) {
        if (fieldValue.boolean)
            return fieldValue.boolean._text;
        if (fieldValue.int)
            return fieldValue.int._text;
        if (fieldValue.string)
            return fieldValue.string._text;
        return fieldValue._text;
    }
}
exports.MethodResponse = MethodResponse;
const xmlToJson = (xml) => {
    return xml.length ? xml_js_1.xml2js(xml, { compact: true }) : false;
};
class ExistsMethodResponse extends MethodResponse {
    constructor(xml) {
        super(xmlToJson(xml));
        this.xml = xml;
        this.parseMembers();
    }
    get success() {
        return this._success;
    }
    set success(value) {
        this._success = value;
    }
    parseMembers() {
        if (this.json && !this.json.methodResponse.fault) {
            let _members = null;
            const { member } = this.json.methodResponse.params.param.value.struct;
            _members = Array.isArray(member) ? member : [member];
            this._success = _members.every((member) => {
                return Number(this.parseFieldValue(member.value)) == 1;
            });
        }
    }
}
exports.ExistsMethodResponse = ExistsMethodResponse;
class AddressesMethodResponse extends MethodResponse {
    constructor(xml) {
        super(xmlToJson(xml));
        this.xml = xml;
        this.parseMembers();
    }
    get userAddresses() {
        return this._userAddresses;
    }
    set userAddresses(value) {
        this._userAddresses = value;
    }
    parseMembers() {
        if (this.json && !this.json.methodResponse.fault) {
            const { member } = this.json.methodResponse.params.param.value.struct;
            const _members = Array.isArray(member) ? member : [member];
            this.userAddresses = _members.map(this.parseUserAddress.bind(this));
        }
    }
    parseUserAddress(member) {
        const address = new user_address_1.UserAddress();
        address.email = this.parseFieldValue(member.name);
        const members = member.value.struct.member;
        members.forEach((member) => {
            switch (member.name._text) {
                case "rating":
                    address.imageRating = Number(this.parseFieldValue(member.value));
                    break;
                case "userimage":
                    address.imageName = this.parseFieldValue(member.value);
                    break;
                case "userimage_url":
                    address.imageUrl =
                        address.imageName && this.parseFieldValue(member.value);
                    break;
            }
        });
        return address;
    }
}
exports.AddressesMethodResponse = AddressesMethodResponse;
class SaveImageMethodResponse extends MethodResponse {
    constructor(xml) {
        super(xmlToJson(xml));
        this.xml = xml;
        this.parseMembers();
    }
    parseMembers() {
        if (this.json && !this.json.methodResponse.fault) {
            const { value } = this.json.methodResponse.params.param;
            this.imageName = this.parseFieldValue(value);
        }
    }
}
exports.SaveImageMethodResponse = SaveImageMethodResponse;
class UserImagesMethodResponse extends MethodResponse {
    constructor(xml) {
        super(xmlToJson(xml));
        this.xml = xml;
        this.parseMembers();
    }
    get userImages() {
        return this._userImages;
    }
    set userImages(value) {
        this._userImages = value;
    }
    parseMembers() {
        if (this.json && !this.json.methodResponse.fault) {
            if (this.json.methodResponse.params.param.value.array) {
                return this.userImages = [];
            }
            const { member } = this.json.methodResponse.params.param.value.struct;
            const members = Array.isArray(member) ? member : [member];
            const self = this;
            this.userImages = members.map(function (img) {
                const userImage = new user_image_1.UserImage();
                userImage.name = self.parseFieldValue(img.name);
                const members = img.value.array.data.value;
                members.forEach(function (member) {
                    const memberValue = member.string._text;
                    if (isNaN(memberValue)) {
                        userImage.url = memberValue;
                    }
                    else {
                        userImage.rating = Number(memberValue);
                    }
                });
                return userImage;
            });
        }
    }
}
exports.UserImagesMethodResponse = UserImagesMethodResponse;
class UseUserImageMethodResponse extends MethodResponse {
    constructor(xml) {
        super(xmlToJson(xml));
        this.xml = xml;
        this.parseMembers();
    }
    parseMembers() {
        if (this.json && !this.json.methodResponse.fault) {
            const { member } = this.json.methodResponse.params.param.value.struct;
            const _members = Array.isArray(member) ? member : [member];
            this.success = _members.every((member) => Number(this.parseFieldValue(member.value)) == 1);
        }
    }
}
exports.UseUserImageMethodResponse = UseUserImageMethodResponse;
class RemoveImageMethodResponse extends MethodResponse {
    constructor(xml) {
        super(xmlToJson(xml));
        this.xml = xml;
        this.parseMembers();
    }
    parseMembers() {
        if (this.json && !this.json.methodResponse.fault) {
            const { member } = this.json.methodResponse.params.param.value.struct;
            const _members = Array.isArray(member) ? member : [member];
            this.success = _members.every((member) => Number(this.parseFieldValue(member.value)) == 1);
        }
    }
}
exports.RemoveImageMethodResponse = RemoveImageMethodResponse;
class DeleteUserImageMethodResponse extends MethodResponse {
    constructor(xml) {
        super(xmlToJson(xml));
        this.xml = xml;
        this.parseMembers();
    }
    parseMembers() {
        if (this.json && !this.json.methodResponse.fault) {
            const { value } = this.json.methodResponse.params.param;
            this.success = Number(this.parseFieldValue(value)) == 1;
        }
    }
}
exports.DeleteUserImageMethodResponse = DeleteUserImageMethodResponse;
class TestMethodResponse extends MethodResponse {
    constructor(xml) {
        super(xmlToJson(xml));
        this.xml = xml;
        this.parseMembers();
    }
    parseMembers() {
        if (this.json && !this.json.methodResponse.fault) {
            const { name, value, } = this.json.methodResponse.params.param.value.struct.member;
            this.response = Number(this.parseFieldValue(value));
        }
    }
}
exports.TestMethodResponse = TestMethodResponse;
