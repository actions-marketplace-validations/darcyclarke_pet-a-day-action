"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("jasmine");
const set_new_image_use_case_1 = require("./set-new-image.use-case");
const mock_factory_1 = require("../Common/TestDoubles/mock-factory");
const use_case_type_1 = require("./use-case-type");
const primitive_stubs_1 = require("../Common/TestDoubles/primitive-stubs");
const Presentation_1 = require("../Presentation");
describe("SetNewImageUseCase", () => {
    let useCase;
    beforeEach(() => {
        mock_factory_1.mockHttpRequests();
        useCase = new set_new_image_use_case_1.SetNewImageUseCase();
        useCase.client = mock_factory_1.mockClient(use_case_type_1.UseCaseType.SetNewImage);
    });
    it("should upload image file", () => __awaiter(void 0, void 0, void 0, function* () {
        useCase.imageFilePath = primitive_stubs_1.fakeImageFilePath;
        useCase.imageRating = Presentation_1.ImageRating.G;
        const newImageName = yield useCase.execute();
        expect(newImageName).toBeDefined();
    }));
    it("should upload image from url", () => __awaiter(void 0, void 0, void 0, function* () {
        useCase.imageUrl = primitive_stubs_1.imageUrl;
        useCase.imageRating = Presentation_1.ImageRating.G;
        const newImageName = yield useCase.execute();
        expect(newImageName).toBeDefined();
    }));
    it("should throw if image not provided", () => __awaiter(void 0, void 0, void 0, function* () {
        let message = false;
        try {
            yield useCase.execute();
        }
        catch (ex) {
            message = ex.message;
        }
        expect(message).toBeTruthy();
    }));
});
