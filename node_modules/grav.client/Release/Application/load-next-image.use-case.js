"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadNextImageUseCase = void 0;
const no_images_error_1 = require("../Domain/no-images-error");
const get_primary_image_use_case_1 = require("./get-primary-image.use-case");
class LoadNextImageUseCase {
    execute() {
        let userImages = [];
        let getPrimaryImage = new get_primary_image_use_case_1.GetPrimaryImageUseCase();
        getPrimaryImage.client = this.client;
        return getPrimaryImage
            .execute()
            .then((primaryImage) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.userImages();
            userImages = response.userImages;
            if (!userImages.length)
                throw new no_images_error_1.NoImagesError();
            return userImages.findIndex((image) => image.name == primaryImage.name);
        }))
            .then((primaryImageIndex) => primaryImageIndex + 1)
            .then((nextImageIndex) => {
            return nextImageIndex >= userImages.length
                ? userImages[0]
                : userImages[nextImageIndex];
        })
            .then((image) => __awaiter(this, void 0, void 0, function* () {
            yield this.client.useUserImage(image.name);
            return image;
        }));
    }
}
exports.LoadNextImageUseCase = LoadNextImageUseCase;
